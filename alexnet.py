# -*- coding: utf-8 -*-
"""Alexnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SJhOM_Jbvj1zHejm06IAjbw_tMCI_e2h
"""

# Commented out IPython magic to ensure Python compatibility.
# Pour importer les outils 
from __future__ import absolute_import, division, print_function, unicode_literals

try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

from tensorflow.keras import datasets, layers, models, Model
from tensorflow.keras.models import load_model
import matplotlib.pyplot as plt
import numpy as np
import cv2
from matplotlib import pyplot
import h5py
from tensorflow.keras.utils import img_to_array

# Pour telécharger la database
(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()
# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

#Pour afficher 25 images de l'ensemble d'apprentissage
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',
               'dog', 'frog', 'horse', 'ship', 'truck']
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i])
    plt.xlabel(class_names[train_labels[i][0]])
plt.show()

# Taper les lignes nécessaires pour définir le modele CNN. C'est à vous d'essayer ;)
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense 
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.constraints import MaxNorm
from tensorflow.keras.optimizers import SGD
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import MaxPooling2D

#Couches de convolutions
model = Sequential()
model.add(Conv2D(32,(3,3),input_shape=(32,32,3),padding="same",activation="relu",kernel_constraint=MaxNorm(3)))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(64,(3,3),activation="relu",padding="same",kernel_constraint=MaxNorm(3)))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(128,(3,3),activation="relu",padding="same",kernel_constraint=MaxNorm(3)))
model.add(Conv2D(128,(3,3),activation="relu",padding="same",kernel_constraint=MaxNorm(3)))
model.add(Conv2D(64,(3,3),activation="relu",padding="same",kernel_constraint=MaxNorm(3)))
model.add(MaxPooling2D(pool_size=(2,2)))

#Couches fully connected
model.add(Flatten())
model.add(Dense(64,activation="relu",kernel_constraint=MaxNorm(3)))
model.add(Dropout(0.2, input_shape=(64,)))
model.add(Dense(64,activation="relu",kernel_constraint=MaxNorm(3)))
model.add(Dropout(0.2, input_shape=(64,)))
model.add(Dense(10,activation="softmax"))

model.summary()

model.compile(optimizer='Adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_images, train_labels, epochs=10, 
                    validation_data=(test_images, test_labels))
model.save("/content/drive/My Drive/Colab Notebooks/my_model_10.h5")

import cv2
import numpy as np

#Pour la prédiction de l'image chien

img = cv2.imread("/content/sample_data/testing.jpg")
img_cvt=cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.imshow(img_cvt)
plt.show()

img = cv2.resize(img_cvt, (32,32))
img = img.astype('float32')
img= img / 255.0
imgs = tf.expand_dims(
    img,
    axis=0,
    name=None
)
prediction = model.predict(imgs)

index_max = np.argmax(prediction)
print(class_names[index_max])